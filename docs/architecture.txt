
This text motivates the conceptional architecture of Troy, as shown in
architecture.pdf.  In particular, this text motivates why the API
concepts in Troy (UnitService, PilotFramework, Pilot) differ from
those in, for example, BigJob, i.e. from the original Pilot API
(naming notwithstanding).

Explicit use cases for Troy are:

  - (A) allow to transparently use different Pilot frameworks via Troy
    (portability).  So, a Troy application should run on either a
    Bigjob or on a Diane backend.  

    Note that this is also achieved if all respective pilot backends
    implement the pilot API (they don't, but one could provide
    wrappers of course).

  - (B) allow to simply write application level schedulers which can
    schedule work unit requests across distinct and diverse backend
    pilot framework instances.


    Example for (B): A system is bootstrapped which consists of 32
    Diane agents managing 1 CPU each, and 1 BigJob pilot managing 32
    CPUs.  The user submits first a 32-node MPI job, and then a 1 node
    job.

    The scheduler inspects the 2 pilot job framework instances, and
    searches them for pilots which have sufficient free resources to
    run the job.  The scheduler does *not* bind the job to a specific
    pilot, but only checks if the framework can handle it -- the
    actual binding to a pilot is left to the pilot framework instance,
    more exactly to the backend scheduler on ComputeUnitService level,
    in Pilot API speak.

    Below is a pseudo code listing of such a scheduler in Troy.  After
    that code follows a discussion why a similarly simple and
    straight forward scheduler is more difficult to write if Troy
    uses the same Pilot API syntax and semantics as, say, BigJob.

    -------------------------------------------------------------
    def scheduler (self, cus, cud) :

        # the following cud properties are relevant for this scheduler's
        # scheduling algorithm:
        nodes = cud.number_of_processes
        spmd  = cud.spmd_variation
        
        # get active pilot_frameworks 
        pf_ids = cus.list_pilot_frameworks ()

        # for the given cud, find a pf with a suitable pilot which
        # can run that cud
        for pf_id in pf_ids :

            # get framework handle
            pf = troy.pilot.framework (pf_id)

            # list all pilots active on that framework instance
            pilot_ids = pf.list_pilots ()

            # inspect the pilots
            for pilot_id in pilot_ids :
              
                # get handle to pilot instance
                p = troy.pilot.pilot (pilot_id)

                # inspect pilot
                if  p.state == troy.pilot.Running and \
                    p.description.size >= nodes   and \
                    p.glue.spmd        == spmd    and \
                    p.glue.free_nodes  >= nodes       :

                    # this pilot can run the job.  Ergo, this
                    # framework can run the job - submit!
                    pf.submit_unit (cud)
                    
                    # nothing more to do
                    return
        
        # when this line is reached, the scheduler failed to find any
        # suitable pilot -- it then needs to either raise an error, or
        # put the request into a asynchronous queue, to run the job at
        # a later point.  Or whatever...
        raise troy.pilot.Exception 
            (troy.pilot.NoSuccess ("no suitable pilot found to run the job")
    -------------------------------------------------------------


    Observations:

      - note that the scheduler only uses the public Troy API - no
        special internal API with different / additional semantics is
        needed to use Troy and to write a scheduler (which is part of
        the usage, really).

      - note that the 32-node job would get submitted to BigJob
        (because SPMD matches), and the single node job gets submitted
        to Diane (because BJ does not have free nodes at this point).
        The scheduler does not need to know what the backends actually
        are, but only cares about their resource properties.

      - note that the actual binding to the pilot instance is left to
        the BJ and Diane schedulers.  If, for example, the BJ instance
        would manage two pilots where one is on a faster machine than
        the other, or one is closer to some input data set than the
        other, the BigJob scheduler can sensibly choose the 'better'
        pilot.  Or if the Diane master knows that one agent is closer
        to some job input data then all others, it can select that
        very agent.

        That way, the Troy scheduler can benefit from the semantics of
        the backend scheduler algorithm, and does not need to reinvent
        the wheel.

        If Troy would not be able to utilize the backend schedulers,
        then each and every Troy scheduler needs to, for example,
        implement data-compute colocation scheduling, even though that
        already works perfectly fine on backend (BJ or Diane) level.


    Discussion:
      
      - if Troy would use the Pilot API, then the UniteService (and
        thus its scheduler) would not operate on a set of
        PilotFrameworks, but on a set of PilotServices.  That Troy
        PilotService would represent one backend PilotService
        instance. 
        
        One can also list Pilots on a PilotService, and do similar
        inspection as in the code above, but one cannot submit to a
        backend ComputeUnitService, but only to a backend PilotService
        (or, if that does not perform scheduling), bind directly to a
        pilot.  Thus one cannot utilize the backend scheduler
        semantics.  

      - One could the BJ CUS internally, and only match its
        PilotServices to Troy's PilotServices, and on CUD submission
        then would silently submit to that PilotService's CUS.

        But that is, IMHO, totally ugly, and defeats the second
        purpose of Troy (A) to allow to transparently use different
        pilot job frameworks -- using the Troy pilot API would not
        translate 1:1 into equivalent pilot API calls on the BJ side,
        at all.  The CUS on Troy would have not correspond to a CUS on
        BJ level, the CPS would correspond to a CUS, etc.

      - One can further try to match the APIs, by actually trying to
        add a BJ CUS as backend to a Troy CUS -- but that again would
        not match the Pilot API semantics, as the Troy CUS, in use
        case (B), will have to talk to *multiple* CUS, not only one.
        Thus, a 'cus.add_pilot_service()' call on the Troy CUS cannot
        be uniquely appointed to one of the backend instances (just
        assume that there are two BJ CUS behind the Troy CUS, one on
        XSEDE, one on EGI...).


      Summa summarum: mumbo jumbo 

        

--------------------------------------------------------------------------------

  FWIW, I see *one* option to salvage the API symmetry between Troy's
  and BJ's Pilot APIs: one would need to add the new Troy semantics as
  a new entity, above the UnitService -- see architecture_alt.pdf for
  that.

  To me that looks quite forced.  Also, the previous API naming may
  need to be reconsidered for that to result in a nice and intuitive
  API.  Anyway, I wanted to mention it...


