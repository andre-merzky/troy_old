
package pilot.data
{
  //////////////////////////////////////////////////////////////////////////////
  //
  //
  //
  class data_pilot_service : implements   saga::object
                             implements   saga::async
                             implements   saga::attributes
                          // from object: saga::error_handler
  {
    CONSTRUCTOR         (in  url                       dps_id = "",
                         out data_pilot_service        obj);
    DESTRUCTOR          (in  data_pilot_service        obj);

    create_pilot        (in  data_pilot_description    dpd, 
                         out data_pilot                dp);
    list_pilots         (out array<url>                dp_ids);
    get_pilot           (in  url                       dp_id, 
                         out data_pilot                dp);
    submit_data_unit    (in  data_init_description     dud, 
                         out data_unit                 du);
    list_data_units     (out array<url>                du_ids);
    get_data_unit       (in  url                       du_id, 
                         out data_unit                 du);

    // Attributes / Metrics:
    //
    //   name:  ID
    //   desc:  pilot service id
    //   mode:  ReadOnly
    //   type:  String
    //   value: -
    //   unit:  -
    //   notes: - can be used to reconnect to the data pilot service.
    //          - is guaranteed to be constant over the service's lifetime.
  };


  //////////////////////////////////////////////////////////////////////////////
  //
  //
  //
  class data_pilot_description : implements   saga::object
                                 implements   saga::attributes
                              // from object: saga::error_handler
  {
    // Attributes:
    //
    //   name:  Size
    //   desc:  expected accumulated size of data units to be stored
    //   mode:  ReadWrite, optional
    //   type:  Int
    //   value: ''
    //   unit:  MegaBytes
    //   notes: - maximal size of storage resource managed by the
    //            data pilot, at any point in time.
    //
    //   name:  Project
    //   desc:  project ID used for accounting of pilot's resource consumption.
    //   type:  String
    //   mode:  ReadWrite, optional
    //   value: ''
    //   unit:  -
    //   notes: - 
    // 
    //   name:  CandidateHosts
    //   desc:  list of hostnames on any of which the pilot may be run..
    //   mode:  ReadWrite, optional
    //   type:  array<string>
    //   value: ''
    //   unit:  -
    //   notes: - order is not significant.
    //          - the pilot submission will fail if non of the listed hosts
    //            can be used to execute the pilot.
    //          - if unspecified, it is up to the backend to select a suitable
    //            execution host.
    // 
    //   name:  WallTimeLimit
    //   desc:  the maximum time the pilot is expected to run
    //   mode:  ReadWrite, optional
    //   type:  Int
    //   value: ''
    //   unit:  hours
    //   notes: -
    // 
    //   name:  StartTime
    //   desc:  the point in time when the pilot is expected to become active.
    //   mode:  ReadWrite, optional
    //   type:  Time
    //   value: ''
    //   unit:  -
    //   notes: - native time specs SHOULD be supported
    // 
    //   name:  Contact
    //   desc:  a (email, sms, IM) contact URL to notify on pilot state changes.
    //   mode:  ReadWrite, optional
    //   type:  String
    //   value: ''
    //   unit:  -
    //   notes: - format: URI (e.g. fax:+123456789, 
    //            sms:+123456789, mailto:joe@doe.net). 
    // 
  };


  //////////////////////////////////////////////////////////////////////////////
  //
  //
  //
  class data_pilot : implements   saga::object
                     implements   saga::async
                     implements   saga::monitorable
                     implements   saga::attributes
                  // from object: saga::error_handler
  {
    CONSTRUCTOR         (in  url                       dps_id,
                         out data_pilot                obj);
    DESTRUCTOR          (in  data_pilot                obj);

    submit_data_unit    (in  data_init_description     dud, 
                         out data_unit                 du);
    list_data_units     (out array<url>                du_ids);
    get_data_unit       (in  url                       du_id, 
                         out data_unit                 du);

    wait                ();
    cancel              ();

    get_description     (out data_pilot_description    dpd);
    reinitialize        (in  data_pilot_description    dpd);

    // Attributes / Metrics:
    //
    //   name:  ID
    //   desc:  pilot id
    //   mode:  ReadOnly
    //   type:  String
    //   value: -
    //   unit:  -
    //   notes: - can be used to reconnect to the pilot at a later stage.
    //          - is guaranteed to be constant over the pilot lifetime.
    //          - the id is only be guaranteed to be available once the pilot is
    //            in Running state.  Before that, the implementation MAY return
    //            an empty string.
    // 
    //   name:  ServiceURL
    //   desc:  URL representation of the data_pilot_service instance
    //          managing this pilot.
    //   mode:  ReadOnly
    //   type:  String
    //   value: -
    //   unit:  -
    //   notes: - can be used for a data_pilot_service CONSTRUCTOR.
    // 
    //   name:  ExecutionHosts
    //   desc:  list of host names or IP addresses allocated 
    //          to run this job
    //   mode:  ReadOnly, optional
    //   type:  Vector String
    //   value: -
    //   unit:  -
    //   notes: - 
    // 
    //   name:  Created
    //   desc:  time stamp of the job creation in the 
    //          resource manager
    //   mode:  ReadOnly, optional
    //   type:  Time
    //   value: -
    //   unit:  seconds since epoch
    //   notes: - can be interpreted as submission time
    //          - native time specs SHOULD be supported
    // 
    //   name:  Started
    //   desc:  time stamp indicating when the job started 
    //          running
    //   mode:  ReadOnly, optional
    //   type:  Time
    //   value: -
    //   unit:  seconds since epoch
    //   notes: - native time specs SHOULD be supported
    // 
    //   name:  Finished
    //   desc:  time stamp indicating when the job completed
    //   mode:  ReadOnly, optional
    //   type:  Time
    //   value: -
    //   unit:  seconds since epoch
    //   notes: - native time specs SHOULD be supported
    // 
    //   name:  State
    //   desc:  literal value of the job state enum.
    //   mode:  ReadOnly
    //   type:  Enum
    //   value: -
    //   unit:  -
    //   notes: - see description of states above
    // 
    //   name:  StateDetail
    //   desc:  backend specific state information
    //   mode:  ReadOnly, optional
    //   type:  String
    //   value: -
    //   unit:  -
    //   notes: -
    // 
    //   name:  WallTimeLeft
    //   desc:  remaining time allocation.
    //   mode:  ReadOnly, optional
    //   unit:  hours
    //   type:  Float
    //   notes: - 
  };


  //////////////////////////////////////////////////////////////////////////////
  //
  //
  //
  class data_unit_service : implements   saga::object
                            implements   saga::async
                            implements   saga::attributes
                         // from object: saga::error_handler
  {
    CONSTRUCTOR         (in  url                       dps_id = "",
                         out data_unit_service         obj);
    DESTRUCTOR          (in  data_unit_service         obj);

    // dps management
    add_data_pilot_service 
                        (in  url                       dps_id);
    remove_data_pilot_service 
                        (in  url                       dps_id);
    list_data_pilot_services
                        (out array<url>                dps_ids);

    // convenience methods
    list_pilots         (out array<url>                dp_ids);
    get_pilot           (in  url                       dp_id, 
                         out data_pilot                dp);

    // du management
    submit_data_unit    (in  data_init_description     dud, 
                         out data_unit                 du);
    list_data_units     (out array<url>                du_ids);
    get_data_unit       (in  url                       du_id, 
                         out data_unit                 du);


    // Attributes / Metrics:
    //
    //   name:  ID
    //   desc:  data unit service id
    //   mode:  ReadOnly
    //   type:  String
    //   value: -
    //   unit:  -
    //   notes: - can be used to reconnect to the data unit service.
    //          - is guaranteed to be constant over the service's lifetime.
  };


  //////////////////////////////////////////////////////////////////////////////
  //
  //
  //
  class data_unit_description : implements   saga::object
                                implements   saga::attributes
                             // from object: saga::error_handler
  {
    CONSTRUCTOR         (out data_unit_description     obj);
    DESTRUCTOR          (in  data_unit_description     obj);


    // Attributes / Metrics:
    //
    // ???
    // Data - input/output data flow for ComputeUnit
    //   'input_data' : [<data unit url>, ... ],      
    //   'output_data': [<data unit url>, ... ]
    //
    //   name:  InputData
    //   desc:  list of data item URLs
    //   mode:  ReadWrite, optional
    //   type:  array<url>
    //   value: -
    //   unit:  -
    //   notes: - 
    //
    //   name:  outputData
    //   desc:  list of data item URLs
    //   mode:  ReadWrite, optional
    //   type:  array<url>
    //   value: -
    //   unit:  -
    //   notes: - 
  }


  class data_unit : implements   saga::object
                    implements   saga::async
                    implements   saga::monitorable
                    implements   saga::attributes
                 // from object: saga::error_handler
  {
    CONSTRUCTOR         (in  url                       du_id,
                         out data_unit                 obj);
    DESTRUCTOR          (in  data_unit                 obj);

    wait                ();
    cancel              ();

    get_description     (out data_unit_description     dud);


    // Attributes / Metrics:
    //
    //   Size?? FIXME
    //
    //   name:  ID
    //   desc:  pilot id
    //   mode:  ReadOnly
    //   type:  String
    //   value: -
    //   unit:  -
    //   notes: - can be used to reconnect to the pilot at a later stage.
    //          - is guaranteed to be constant over the pilot lifetime.
    //          - the id is only be guaranteed to be available once the pilot is
    //            in Running state.  Before that, the implementation MAY return
    //            an empty string.
    // 
    //   name:  UnitServiceURL
    //   desc:  URL representation of the data_unit_service instance
    //          managing this data unit.
    //   mode:  ReadOnly
    //   type:  String
    //   value: -
    //   unit:  -
    //   notes: - can be used for a data_unit_service CONSTRUCTOR.
    //          - may be undefined, for example, if the unit was scheduled via
    //            a data_pilot_service.
    // 
    //   name:  PilotServiceURL
    //   desc:  URL representation of the data_pilot_service instance
    //          managing this data unit.
    //   mode:  ReadOnly
    //   type:  String
    //   value: -
    //   unit:  -
    //   notes: - can be used for a data_pilot_service CONSTRUCTOR.
    //          - may be undefined, for example, if the unit was scheduled via
    //            a data_unit_service.
    // 
    //   name:  PilotURL
    //   desc:  URL representation of the data_pilot instance
    //          managing this data unit.
    //   mode:  ReadOnly
    //   type:  String
    //   value: -
    //   unit:  -
    //   notes: - can be used for a data_pilot CONSTRUCTOR.
    // 
    //   name:  ExecutionHosts
    //   desc:  list of host names or IP addresses associated
    //          with that data unit
    //   mode:  ReadOnly, optional
    //   type:  Vector String
    //   value: -
    //   unit:  -
    //   notes: - 
    // 
    //   name:  Created
    //   desc:  time stamp of the job creation in the 
    //          resource manager
    //   mode:  ReadOnly, optional
    //   type:  Time
    //   value: -
    //   unit:  seconds since epoch
    //   notes: - can be interpreted as submission time
    //          - native time specs SHOULD be supported
    // 
    //   name:  Started
    //   desc:  time stamp indicating when the data unit got
    //          instantiated
    //   mode:  ReadOnly, optional
    //   type:  Time
    //   value: -
    //   unit:  seconds since epoch
    //   notes: - native time specs SHOULD be supported
    // 
    //   name:  Finished
    //   desc:  time stamp indicating when the data unit got
    //          deallocated.
    //   mode:  ReadOnly, optional
    //   type:  Time
    //   value: -
    //   unit:  seconds since epoch
    //   notes: - native time specs SHOULD be supported
    // 
    //   name:  State
    //   desc:  literal value of the unit's state enum.
    //   mode:  ReadOnly
    //   type:  Enum
    //   value: -
    //   unit:  - 
    //   notes: - see description of states above
    // 
    //   name:  StateDetail
    //   desc:  backend specific state information
    //   mode:  ReadOnly, optional
    //   type:  String
    //   value: -
    //   unit:  - 
    //   notes: - 
  };

} // package pilot.data

